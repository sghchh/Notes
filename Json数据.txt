JavaScript Object Notation（Json）是一种与开发语言无关的，轻量级的数据格式，是一种数据格式的标准或者规范。

一.JSON的数据结构：
1.Object（对象）用花括号括住，里面的数据用key—values对来表示，其中key只能是字符串类型，每个key—values对之间用逗号相隔
2.数组：用中括号括住，里面的每个元素之间用逗号隔开
3基本类型：有false，true，string，null，number五中类型，其中的number就是数字类型，但它可以是任何数字（整数，小数，负数等）。
注意：JSON不支持任何形式的注释，既不能添加注释

示例：
{
“name”:"李明",
"age":20,
"has_girlfriend":false,
"major":["数学"，“物理”]
}

JSON这种数据交换格式比XML更加轻量级，比二进制容易阅读和编写，调试也更加方便。所以解析和生成JSON就显得很重要了。

二.GSON：解析和生成JSON的工具类库

1.GSON生成JSON：toJson（）方法来实现序列化
首先定义一个Java bean来作为例子

public class User {
    //省略其它，这里省略的是各个属性的set和get方法
    public String name;
    public int age;
    public String emailAddress;
}
生成JSON：
Gson gson = new Gson();
User user = new User("怪盗kidou",24);
String jsonObject = gson.toJson(user); // 数据就准换成了JSON的格式{"name":"怪盗kidou","age":24}

2.GSON解析JSON：fromJson（）方法来实现反序列化
Gson gson = new Gson();
String jsonString = "{\"name\":\"怪盗kidou\",\"age\":24}";
User user = gson.fromJson(jsonString, User.class);

3.属性重命名@SerializedName注解的使用
不同的语言有不同的定义变量或者属性的格式，而通过上面的例子看出，生成JSON的时候相应的key值和JavaBean中属性的名字是一样的（既{"name":"怪盗kidou","age":24}中“name”来自于Javabean中属性名称name），如果我想在生成JSON的时候变成这样呢{"NAME":"怪盗kidou","age":24}，这就要用到这个注解了
只要在定义String name的时候加上这段注解就行
@SerializedName（“NAME”）
public String name；
注意：这个注释还提供了备选的功能，可以在生成JSON的时候有多个备选的名字，用得着的话可以上网查，这里就不在赘述了

4.GSON对泛型的支持：Gson为我们提供了TypeToken来实现对泛型的支持（主要用于解析JSON中的数组成Java中的集合）
详细的讲解和用法请看http://www.jianshu.com/p/e740196225a4

三.强大的GsonBuilder：对Gson功能的拓展和丰富
通过GsonBuilder可以导出null值，格式化输出，日期时间等
顾名思义，GsonBuilder是一个构建Gson实例的一个类。
Gson gson=new GsonBuilder（）.各种配置.create();
常见的配置有//序列化null
        .serializeNulls()
        // 设置日期时间格式，另有2个重载方法
        // 在序列化和反序化时均生效
        .setDateFormat("yyyy-MM-dd")
        // 禁此序列化内部类
        .disableInnerClassSerialization()
        //生成不可执行的Json（多了 )]}' 这4个字符）
        .generateNonExecutableJson()
        //禁止转义html标签
        .disableHtmlEscaping()
        //格式化输出
        .setPrettyPrinting()
