线程有以下几个状态：新建（NEW），就绪（Runnable），运行（Running），阻塞（Blocked）和死亡（Dead）
一.新建状态
   在一个线程使用new关键字创建了之后，这个线程就进入了新建状态
二.就绪状态
   处于新建状态的线程调用了start方法之后就处在了就绪状态，处在这个状态的线程只是表示随时可以运行并未真的开始运行。
   至于何时开始运行，这要取决于JVM里的线程调度器的调度，也就是说即使调用了start方法之后这个线程不一定立即执行（事实上一定不会立即执行）
   public class MyThread extends Thread{
	public void run()
	{
		for (int i=0;i<100;i++)
		{
			System.out.println(getName()+""+i);
		}
	}
	public static void main (String[]args)
	{
		for (int i=0;i<100;i++)
		{
			System.out.println(Thread.currentThread().getName()+""+i);
			if(i==30)
			{
				new MyThread().start();
			}
		}
	}
}
   这段代码执行后控制台打印情况来看当main线程i=30的时候新线程并没有运行，main线程的i到了30多的时候新线程才开始运行（而且多执行几次这个程序发现每次新线程开始的时刻都不同，但都在i=30之后），这正说明了“就绪状态”而不是调用start之后立马执行
   注意：只能对处于新建状态的线程调用start方法，否则将会引发IllegalThreadStateException异常
三.运行状态
   当线程获得CPU开始执行run（）方法的时候就处于运行状态
四.阻塞状态
   以下几种情况线程会进入阻塞状态：
   1.线程调用了sleep（）方法主动放弃占用的处理器资源
   2.线程调用了一个阻塞式IO方法，在该方法返回之前，该线程被阻塞
   3.线程试图获得一个同步监视器，但是该同步监视器正在被其他的线程所持有。
   4.线程正在等待某个通知（notify）
   5.调用了线程的suspend（）方法将该线程挂起（容易导致死锁，应尽量避免使用）
   被阻塞的线程会在合适的时候重新进入就绪状态，注意是就绪状态而不是运行状态。
五.死亡状态
   以下几种情况导致线程死亡
   1.线程的run（）方法执行完成，结束后处于死亡状态
   2.线程抛出一个未捕获的Exception或Error
   3.直接调用该线程的stop（）方法来结束线程（该方法容易导致死锁，不推荐使用）
   判断线程是否处于死亡状态的实例方法是isAlive（）：当线程处于就绪，运行，阻塞状态时返回true，当处于新建和死亡状态的时候返回false。
   注意：不能对死亡的线程调用start方法
   
线程控制
一.join线程
   join方法可以让一个线程等待另一个线程完成。一段执行流中创建一个新的线程，并且该线程调用join方法，则程序流需要等待这个新的线程执行完才能继续执行。
   join有两种常用的实现：
        1.join（）：直到join的线程执行完
        2.join（int a）：等待a毫秒，如果还没完成，则不再等待
    public class MyThread extends Thread{
	public void run()
	{
		for (int i=0;i<100;i++)
		{
			System.out.println(getName()+""+i);
		}
	}
	public static void main (String[]args) throws InterruptedException
	{
		for (int i=0;i<100;i++)
		{
			System.out.println(Thread.currentThread().getName()+""+i);
			if(i==30)
			{
				MyThread joinThread=new MyThread();
				joinThread.start();
				joinThread.join();
				
			}
		}
	}
}
    运行这个程序，发现从i=30开始新线程就开始执行，并且一直到执行完毕（因为即使jvm调度不可能start之后立马让新线程进入运行状态，但这个程序中main线程继续执行的时候遇到了joinThread.join（），所以main线程立刻进入等待，所以表现就是当i=30时，新线程立刻执行）
二.后台线程
    有一种任务是为其他线程提供服务的线程称作“后台线程”。
	后台线程有个特点：如果所有前台线程都死亡，后台线程会自动死亡
	只要调用线程对象的setDaemon（true）即可将这个线程设置为后台线程。
	注意：setDaemon（）方法必须在start（）方法之前调用，否则会出现异常。
三.线程睡眠
    如果想让当前正在执行的线程暂停一段时间，并进入阻塞状态，可以调用Thread类的静态方法sleep（）即可。
    sleep（int a）：当前线程阻塞a毫秒后进入就绪状态，注意是进入就绪状态。
	sleep（）调用后是即刻进入阻塞状态，其他线程获得执行的机会，并不理会执行的线程的优先级是否大于等于阻塞的线程
四.线程让步
    yield（）是线程类的一个静态方法，调用的线程即刻转入就绪状态，注意是就绪状态，并不会阻塞该线程。之后，优先级大于等于该线程的线程获得执行的机会，完全有可能，没有比这个线程优先级大或相等的线程，则这个线程继续执行。

线程同步
   当多线程共同操作一个数据时，容易产生错误情况
一.同步代码块
   java的多线程支持引入了同步监视器来解决线程安全的问题。
   使用同步代码块格式如下：
   synchronized（obj）
   {
   。。。
   }
   括号中的obj就是同步监视器，上面代码的含义是：线程开始执行同步代码块之前，必须先获得对同步监视器的锁定。
   注意：同一时间只能有一个线程可以获得对同步监视器的锁定，当同步代码块执行完成后，就会释放对同步监视器的锁定。
二.同步方法
   用synchronized修饰的实例方法（非static方法）无需显示指定同步监视器，同步方法的同步监视器是this，也就是调用该方法的对象。
   注意：synchronized关键字可以修饰方法，可以修饰代码块，不能修饰构造器，变量等。
无法显式释放同步监视器，以下几种情况会释放同步监视器的锁定：
   1.线程的同步代码块或者同步方法执行完成
   2.同步代码块或同步方法遇到了break，return终止了该代码块或者方法的继续执行
   3.遇到了未处理的Error或者Exception
   4.当前线程执行同步代码块或者同步方法时程序执行了同步监视器对象的wait（）方法。
三.同步锁
   java提供了更为强大的线程同步机制——通过显式定义同步锁对象来实现同步。同步锁由Lock对象充当，Lock和ReadWriteLock（读写锁）是两个根接口，ReentrantLock（可重入锁）是Lock的实现类，ReentrantReadWriteLock是ReadWriteLock的实现类，ReentrantReadWriteLock为读写操作提供了三种模式：Writing，ReadingOptimistic，Reading
   使用这种方法非常简单，只需在代码之前调用同步锁对象的lock（）方法，结束后调用unlock（）方法即可。
   